package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strconv"
	"time"
)

var space, tree string
var i, count, linecount int
var slopes [11]int

func main() {
	/*
		ps("Krav:")
	*/
	//open the file
	inputfile, err := os.Open("input32.txt")
	check(err)

	//close the file later
	defer inputfile.Close()

	//timestamp
	fmt.Println(time.Now())

	slopes[0] = 1
	slopes[1] = 3
	slopes[2] = 6
	slopes[3] = 9
	slopes[4] = 12
	slopes[5] = 15
	slopes[6] = 18
	slopes[7] = 21
	slopes[8] = 24
	slopes[9] = 27
	slopes[10] = 30

	linecount := 0
	ps("linecount=" + strconv.Itoa(linecount))

	//read file, create slice of values and extract elements
	scanner := bufio.NewScanner(inputfile)
	for scanner.Scan() {
		runes := []rune(scanner.Text())
		//ps(string(runes))
		check(err)
		for j, r := range slopes {
			if linecount == j {
				ps("j=" + strconv.Itoa(j))
				ps("r=" + strconv.Itoa(r))
				space := string(runes[r])
				ps("space=" + space)
			}
		}
		linecount++
		ps("linecount=" + strconv.Itoa(linecount))
		if linecount == 11 {
			linecount := 0
			ps("linecount was 11, restt to 0" + strconv.Itoa(linecount))
		}
	}
}
func ps(phrase string) {
	fmt.Println(phrase)
}
func pi(number int) {
	fmt.Println(number)
}
func pSlice(s []int) {
	fmt.Printf("len=%d cap=%d %v\n", len(s), cap(s), s)
}
func check(e error) {
	if e != nil {
		log.Fatal(e)
		panic(e)
	}
}
